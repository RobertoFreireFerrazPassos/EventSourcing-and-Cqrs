// <auto-generated />
using System;
using Kitchen.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kitchen.DataAccess.Migrations
{
    [DbContext(typeof(KitchenDbContext))]
    [Migration("20220828133249_IntegrationEventOutbox")]
    partial class IntegrationEventOutbox
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kitchen.Domain.Entities.IntegrationEventOutbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("IntegrationEventsOutbox");
                });

            modelBuilder.Entity("Kitchen.Domain.Entities.MenuItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5534d23-f3b5-4907-bfc4-671b9caf0d4a"),
                            Name = "Soup"
                        });
                });

            modelBuilder.Entity("Kitchen.Domain.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Table")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Kitchen.Domain.Entities.OrderItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderEntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderEntityId");

                    b.ToTable("OrderItemEntity");
                });

            modelBuilder.Entity("Kitchen.Domain.Entities.StoredEventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("StoredEvents");
                });

            modelBuilder.Entity("Kitchen.Domain.Entities.TableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentAggregateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9639253-f3dc-4b02-a4aa-29e3eae9645f"),
                            CurrentAggregateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("80572e94-a8f8-42b7-9ab0-91634353bd5a"),
                            CurrentAggregateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("a8ba66b6-8374-4c3d-9371-08133067c3c1"),
                            CurrentAggregateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("15dc2b56-f324-463f-ab9a-e954f81df75a"),
                            CurrentAggregateId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Number = 4
                        });
                });

            modelBuilder.Entity("Kitchen.Domain.Entities.IntegrationEventOutbox", b =>
                {
                    b.HasOne("Kitchen.Domain.Entities.StoredEventEntity", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Kitchen.Domain.Entities.OrderItemEntity", b =>
                {
                    b.HasOne("Kitchen.Domain.Entities.MenuItemEntity", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kitchen.Domain.Entities.OrderEntity", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderEntityId");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Kitchen.Domain.Entities.OrderEntity", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
